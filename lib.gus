(def t 't)
(def list (fn xs xs))
(def pair (fn (a b) `(,a . ,b)))
(def let (rw (bs . xp) `((fn ,(map hd bs) @xp) @(map (fn (p) (hd (tl p))) bs))))
(def nil? (fn (x) (eq? x ())))
(def map (fn (f l) (if l (pair (f (hd l)) (map f (tl l))) ())))
(def map* (fn (f . ls) (if (any? nil? ls) () (let ((vs (map hd ls)) (rs (map tl ls))) (pair (apply f vs) (apply map* (pair f rs)))))))
(def zip (fn (a b) (map* pair a b)))
(def any? (fn (pred l) (if (nil? l) l (if (pred (hd l)) t (any? pred (tl l))))))
(def all? (fn (pred l) (if (nil? l) t (if (pred (hd l)) (all? pred (tl l)) ()))))
(def filter (fn (pred l) (if (nil? l) l (let ((fd (filter pred (tl l)))) (if (pred (hd l)) (pair (hd l) fd) fd)))))
(def fold (fn (f h l) (if (nil? l) h (fold f (f h (hd l)) (tl l)))))
(def reverse (fn (l) (fold (fn (m l) (pair l m)) () l)))
