(def t 't)
(def hd t)
(def tl ())
(def (pair a b) `(,a . ,b))
(def (list . xs) xs)
(def let (rw (bs . xp) `((fn ,(map t bs) @xp) @(map (fn (p) (t (() p))) bs))))
(def (null? x) (eq? x ()))
(def (truth-value x) ((eq? x ()) '(() . t)))
(def (map f l) (if l (pair (f (t l)) (map f (() l))) ()))
(def (any? pred l) (if (null? l) l (if (pred (t l)) t (any? pred (() l)))))
(def (all? pred l) (if (null? l) t (if (pred (t l)) (all? pred (() l)) ())))
(def (filter pred l) (if (null? l) l (let ((fd (filter pred (tl l)))) (if (pred (hd l)) (pair (hd l) fd) fd))))
(def (fold f h l) (if (null? l) h (fold f (f h (hd l) (tl l)))))
(def (map* f . ls) (let ((r (if (any? null? ls) () (let ((vs (map t ls)) (rs (map () ls))) (pair (apply f vs) (apply map* (pair f rs))))))) r))
